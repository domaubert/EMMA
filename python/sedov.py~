#!/usr/bin/env python

import numpy as np
from math import sqrt
import matplotlib.pylab as plt
import threading


from pyemma  import *



def getProfile(fileName,args):
	level = args.level
	field = args.field[0]


	file  = fileName.replace("grid","cube"+ str(level)) + "." + field

	data =  amr.cube(file)
	Nx,Ny,Nz = data.getSize()	
	c = data.getData()
	
	x = np.arange(Nx/2)
	y = c[Nx/2:Nx,Ny/2,Nz/2]
	
	return Nx,Ny,Nz,x,y

def getProfileDiag(fileName,args):
	level = args.level
	field = args.field[0]

	file  = fileName.replace("grid","cube"+ str(level)) + "." + field

	data =  amr.cube(file)

	c =  data.getData()
	Nx,Ny,Nz = data.getSize()

#	x = np.arange(Nx/2)
#	y = c[Nx/2:Nx,Ny/2,Nz/2]

	diag = int(np.sqrt(Nx*Nx/4 + Ny*Ny/4))

	x = np.arange(Nx/2) * np.sqrt(2)
	y = np.zeros(Nx/2)
	for i in range(Nx/2):
		y[i] = c[Nx/2+i,Ny/2+i,Nz/2]

	return Nx,Ny,Nz,x,y



class kernel (threading.Thread):
    def __init__(self, args):
        threading.Thread.__init__(self)
        self.args = args  
    def run(self):
		print "starting thread", self.threadID

   		c,rho,n,Nx,Ny,Nz,diag, Zmin,Zmax,xc,yc,zc, threadLock = self.args
   		
		for z in range(Zmin,Zmax):
			Z = float(z-zc)
			for y in range(0,Ny):
				Y = float(y-yc)
				for x in range(0,Nx):
					X = float(x-xc)

					r = int(np.sqrt( X*X + Y*Y + Z*Z ) )
					rho[r] += c[z][y][x]
					n[r] += 1
		threadLock.acquire()		
		threadLock.release()


def getProfileProperPara(fileName):

	data = amr.cube(fileName)

	Nx,Ny,Nz = data.getSize()
	xc,yc,zc = Nx/2.,Ny/2.,Nz/2.

	diag = int(Nx/2. * sqrt(3.0) ) +1

	nproc = 4

	deltaZ = Nz/nproc

	c =  data.getData()
	rho = np.zeros(diag, dtype=np.float)
	n = np.zeros(diag, dtype=np.float)
	
	thread=[]
	threadLock = threading.Lock()

	for i in range(nproc):			
		Zmin = deltaZ * (i  )
		Zmax = deltaZ * (i+1)
		
		thread.append(kernel((c,rho,n,Nx,Ny,Nz,diag,Zmin,Zmax,xc,yc,zc,threadLock)))
		
	for i in range(nproc):	
		thread[i].start()
		
	for i in range(nproc):	
		thread[i].join()
	print "all threads done"
	
	yplot = np.divide(rho,n)
	xplot = np.arange(diag)


	print np.sum(n), pow(256,3)

	return Nx,Ny,Nz,xplot,yplot

def getProfileProper(fileName):

	data = amr.cube(fileName)

	Nx,Ny,Nz = data.getSize()
	xc,yc,zc = Nx/2.,Ny/2.,Nz/2.

	diag = int(Nx/2. * sqrt(3.0) ) +1


	c =  data.getData()
	rho = np.zeros(diag, dtype=np.float)
	n = np.zeros(diag, dtype=np.float)
	  
	for z in range(0,Nz):
		print z
		Z = float(z-zc)
		for y in range(0,Ny):
			Y = float(y-yc)
			for x in range(0,Nx):
				X = float(x-xc)

				r = int(np.sqrt( X*X + Y*Y + Z*Z ) )
				rho[r] += c[z][y][x]
				n[r] += 1
	
	yplot = np.divide(rho,n)
	xplot = np.arange(diag)

	return Nx,Ny,Nz,xplot,yplot
	

def solution():
		return np.loadtxt('sedov.dat', usecols=(1,2), unpack=True)

	
if __name__ == "__main__":	

	args = IO.getargs()
	level = args.level
	field = args.field[0]

	fileName = args.files[0] 
#	fileName = fileName[:-10] +  "grid" +  fileName[-6:] 


#	args.field = ["field.d"]
#	denoct2grid(fileName, args,0)



	"""
	args.field = ["field.d"]
	Nx,Ny,Nz,x,y = getProfile(fileName,args)
	plt.plot(x,y, label="density")

	args.field = ["field.p"]
	Nx,Ny,Nz,x,y = getProfile(fileName,args)
	plt.plot(x,y, label="P")

	args.field = ["field.u"]
	Nx,Ny,Nz,x,y = getProfile(fileName,args)
	plt.plot(x,y, label="Vx")
	"""

	
	args.field = ["field.d"]
	Nx,Ny,Nz,x,y = getProfile(fileName,args)
	plt.plot(x,y, label="x")

	Nx,Ny,Nz,x,y = getProfileDiag(fileName,args)
	plt.plot(x,y, label="diag")
	"""
	Nx,Ny,Nz,x,y = getProfileProper(fileName,args)
	plt.plot(x,y, label="proper")
	"""
	
	"""
	Nx,Ny,Nz,x,y = getProfileProper(fileName.replace("grid","cube"+ str(level)) + "." + field)

	#Nx,Ny,Nz,x,y = getProfile(fileName,args)
	plt.plot(x,y,'.', label="numerical")
	
	
	"""
	x,y = solution()
	x /= np.max(x)
	x *= pow(2,args.level)/2
	
	y /= y[len(y)-1]
	
	#print x,y

	plt.plot(x,y,label='analytical')
	
#	plt.xlim(0,64)
#	plt.ylim(0.975,1.01)

	

	plt.legend()
	plt.show()

	

