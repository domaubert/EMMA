#!/usr/bin/env python
import os,sys
import argparse
import subprocess

user_default = "deparis"
host_default = "hpc-login"
folder_default = "Quartz6/"
paramfile_default = "params/test_strom.run"
tar = "Emma.tar"

def sshcom(command, username, remotehost):
	ssh = subprocess.Popen(["ssh", "%s@%s"%(username, remotehost) , command],
                       shell=False,
                       stdout=subprocess.PIPE,
                       stderr=subprocess.PIPE)
	result = ssh.stdout.readlines()
	if result == []:
		error = ssh.stderr.readlines()
		print >>sys.stderr, "ERROR: %s" % error
  #		sys.exit()
	else:
		print result

def listfile(paramfile):
	files_to_compress = ["Makefile", paramfile, "quartz"]
	files = os.listdir(".")	
	for file in files:
		if file[-2:] == ".h" or file[-2:] == ".c" : 
			files_to_compress.append(file)
	files = os.listdir("atomic_data/")
	for file in files:
		if file[-2:] == ".h":
			files_to_compress.append("atomic_data/"+file)
	return files_to_compress
	
def compress(args):
	print "compressing sources"
	files_to_compress = listfile(args.paramfile)
	os.system("tar -cf %s %s "%(tar,' '.join(files_to_compress)))		

def sendtar(args):
	print "Sending archive on %s"%args.host
	os.system('scp %s "%s@%s:%s"' % (tar, args.user, args.host, args.folder))

def untaronhost(args):
	print "Decompressing archive on %s"%args.host
	command = "tar -xf %s%s -C %s 2>error"%(args.folder, tar, args.folder)
	sshcom(command, args.user, args.host)

def runslurm(args):
	print "Sending program on queue"
	command = "cd %s && sbatch quartz"%args.folder
	sshcom(command, args.user, args.host)

def make(args):	
	print "Compiling"
	command = "make -C %s"%args.folder
	sshcom(command, args.user, args.host)

def runfront(args):
	print "Running program"
	command = "cd %s && ./quartzcpu %s 2>error 1>runlog"%(args.folder, args.paramfile)
	sshcom(command, args.user, args.host)
	
def run(args):	
	if args.slurm:
		runslurm(args)
	else:	
		make(args)
		runfront(args)
	
def getargs():
	parser = argparse.ArgumentParser(description="EMMA remote launcher", usage="On first launch you need to set auto ssh login on host and create a work directory on host with data/ and bkp/ subdirectory")	
	parser.add_argument('-s', action="store_true", dest="slurm", help="launch program on slurm queue, launch on front if not define")
	parser.add_argument('-p', action="store", default=paramfile_default, dest="paramfile", help = ".run parameters file to use")
	parser.add_argument('-u', action="store", default=user_default, dest="user", help="username used to connect on host")
	parser.add_argument('-r', action="store", default=host_default, dest="host", help="distant machine where the run will be launch")
	parser.add_argument('-f', action="store", default=folder_default, dest="folder", help="working directory on host")
	args = parser.parse_args()
	return args
	
if __name__ == "__main__":	
	args = getargs()
	compress(args)
	sendtar(args)
	untaronhost(args)
	run(args)

	print "Done"
